{"ast":null,"code":"var _jsxFileName = \"/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport MyImage from './ParticleImage.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let particlesArray = [];\n    const numberOfParticles = 12000;\n    const detail = 1;\n    ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n    const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    let grid = [];\n\n    for (let y = 0; y < canvas.height; y += detail) {\n      let row = [];\n\n      for (let x = 0; x < canvas.width; x += detail) {\n        const red = pixels.data[y * 4 * pixels.width + x * 4];\n        const green = pixels.data[y * 4 * pixels.width + (x * 4 + 1)];\n        const blue = pixels.data[y * 4 * pixels.width + (x * 4 + 2)];\n        const color = 'rgb(' + red + ',' + green + ',' + blue + ')';\n        const brightness = calculateBrightness(red, green, blue) / 100;\n        row.push(brightness);\n      }\n\n      grid.push(row);\n    }\n\n    function calculateBrightness(red, green, blue) {\n      return Math.sqrt(red * red * 0.299 + green * green * 0.587 + blue * blue * 0.114) / 100;\n    }\n\n    let animationFrameId;\n\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = 0;\n        this.speed = 0;\n        this.velocity = Math.random() * 0.5;\n        this.size = Math.random() * 1 + 1;\n        this.position1 = Math.floor(this.y);\n        this.position2 = Math.floor(this.x);\n      }\n\n      update() {\n        this.position1 = Math.floor(this.y);\n        this.position2 = Math.floor(this.x);\n        this.speed = mappedImage[this.position1][this.position2][0];\n        let movement = 2.5 - this.speed + this.velocity;\n        this.y += movement;\n\n        if (this.y >= canvas.height) {\n          this.y = 0;\n          this.x = Math.random() * canvas.width;\n        }\n      }\n\n      draw() {\n        ctx.beginPath();\n        ctx.fillStyle = 'white';\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n    }\n\n    function init() {\n      for (let i = 0; i < numberOfParticles; i++) {\n        particlesArray.push(new Particle());\n      }\n    }\n\n    init();\n\n    function animate() {\n      ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n      ctx.globalAlpha = 0.05;\n      ctx.fillStyle = 'rgb(0,0,0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      for (let i = 0; i < particlesArray.length; i++) {\n        particlesArray[i].update();\n        particlesArray[i].draw();\n      }\n\n      requestAnimationFrame(animate);\n    }\n\n    animate(); //Our draw came here\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas; // myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n//     class Particle {\n//         constructor(){\n//             this.x = Math.random() * canvas.width;\n//             this.y = 0;\n//             this.speed = 0;\n//             this.velocity = Math.random() * 0.5;\n//             this.size = Math.random() * 1.5 + 1;\n//         }\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n//     init();\n//     function animate(){\n//         ctx.globalAlpha = 0.05;\n//         ctx.fillStyle = 'rgb(0,0,0)';\n//         ctx.fillRect(0,0,canvas.width, canvas.height);\n//         for(let i = 0; i < particlesArray.length; i++){\n//             particlesArray[i].update();\n//             particlesArray[i].draw();\n//         }\n//         requestAnimationFrame(animate);\n//     }\n//     animate()\n// });\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js"],"names":["React","useRef","useEffect","MyImage","Canvas","props","canvasRef","canvas","current","ctx","getContext","particlesArray","numberOfParticles","detail","drawImage","width","height","pixels","getImageData","clearRect","grid","y","row","x","red","data","green","blue","color","brightness","calculateBrightness","push","Math","sqrt","animationFrameId","Particle","constructor","random","speed","velocity","size","position1","floor","position2","update","mappedImage","movement","draw","beginPath","fillStyle","arc","PI","fill","init","i","animate","globalAlpha","fillRect","length","requestAnimationFrame","window","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAwC,OAAxC;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;AAGA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AAEpB,QAAMC,SAAS,GAAGL,MAAM,CAAC,IAAD,CAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMK,MAAM,GAAGD,SAAS,CAACE,OAAzB;AACA,UAAMC,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AAEA,QAAIC,cAAc,GAAG,EAArB;AACA,UAAMC,iBAAiB,GAAG,KAA1B;AACA,UAAMC,MAAM,GAAG,CAAf;AAEAJ,IAAAA,GAAG,CAACK,SAAJ,CAAcX,OAAd,EAAuB,CAAvB,EAA0B,CAA1B,EAA6BI,MAAM,CAACQ,KAApC,EAA2CR,MAAM,CAACS,MAAlD;AACA,UAAMC,MAAM,GAAGR,GAAG,CAACS,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBX,MAAM,CAACQ,KAA9B,EAAqCR,MAAM,CAACS,MAA5C,CAAf;AACAP,IAAAA,GAAG,CAACU,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBZ,MAAM,CAACQ,KAA3B,EAAkCR,MAAM,CAACS,MAAzC;AAEA,QAAII,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACS,MAA3B,EAAmCK,CAAC,IAAIR,MAAxC,EAA+C;AAC3C,UAAIS,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,MAAM,CAACQ,KAA3B,EAAkCQ,CAAC,IAAIV,MAAvC,EAA8C;AAC1C,cAAMW,GAAG,GAAGP,MAAM,CAACQ,IAAP,CAAaJ,CAAC,GAAG,CAAJ,GAAQJ,MAAM,CAACF,KAAhB,GAA0BQ,CAAC,GAAG,CAA1C,CAAZ;AACA,cAAMG,KAAK,GAAGT,MAAM,CAACQ,IAAP,CAAaJ,CAAC,GAAG,CAAJ,GAAQJ,MAAM,CAACF,KAAhB,IAA0BQ,CAAC,GAAG,CAAJ,GAAQ,CAAlC,CAAZ,CAAd;AACA,cAAMI,IAAI,GAAGV,MAAM,CAACQ,IAAP,CAAaJ,CAAC,GAAG,CAAJ,GAAQJ,MAAM,CAACF,KAAhB,IAA0BQ,CAAC,GAAG,CAAJ,GAAQ,CAAlC,CAAZ,CAAb;AACA,cAAMK,KAAK,GAAG,SAASJ,GAAT,GAAc,GAAd,GAAoBE,KAApB,GAA4B,GAA5B,GAAkCC,IAAlC,GAAyC,GAAvD;AACA,cAAME,UAAU,GAAGC,mBAAmB,CAACN,GAAD,EAAME,KAAN,EAAaC,IAAb,CAAnB,GAAsC,GAAzD;AAEAL,QAAAA,GAAG,CAACS,IAAJ,CAASF,UAAT;AACH;;AACDT,MAAAA,IAAI,CAACW,IAAL,CAAUT,GAAV;AACH;;AAED,aAASQ,mBAAT,CAA6BN,GAA7B,EAAkCE,KAAlC,EAAyCC,IAAzC,EAA8C;AAC1C,aAAOK,IAAI,CAACC,IAAL,CACFT,GAAG,GAAGA,GAAP,GAAc,KAAd,GACCE,KAAK,GAAGA,KAAT,GAAkB,KADlB,GAECC,IAAI,GAAGA,IAAR,GAAgB,KAHb,IAIL,GAJF;AAKH;;AAED,QAAIO,gBAAJ;;AAEA,UAAMC,QAAN,CAAe;AACXC,MAAAA,WAAW,GAAE;AACT,aAAKb,CAAL,GAASS,IAAI,CAACK,MAAL,KAAgB9B,MAAM,CAACQ,KAAhC;AACA,aAAKM,CAAL,GAAS,CAAT;AACA,aAAKiB,KAAL,GAAa,CAAb;AACA,aAAKC,QAAL,GAAgBP,IAAI,CAACK,MAAL,KAAgB,GAAhC;AACA,aAAKG,IAAL,GAAYR,IAAI,CAACK,MAAL,KAAgB,CAAhB,GAAoB,CAAhC;AACA,aAAKI,SAAL,GAAiBT,IAAI,CAACU,KAAL,CAAW,KAAKrB,CAAhB,CAAjB;AACA,aAAKsB,SAAL,GAAiBX,IAAI,CAACU,KAAL,CAAW,KAAKnB,CAAhB,CAAjB;AACH;;AAEDqB,MAAAA,MAAM,GAAG;AACL,aAAKH,SAAL,GAAiBT,IAAI,CAACU,KAAL,CAAW,KAAKrB,CAAhB,CAAjB;AACA,aAAKsB,SAAL,GAAiBX,IAAI,CAACU,KAAL,CAAW,KAAKnB,CAAhB,CAAjB;AACA,aAAKe,KAAL,GAAaO,WAAW,CAAC,KAAKJ,SAAN,CAAX,CAA4B,KAAKE,SAAjC,EAA4C,CAA5C,CAAb;AACA,YAAIG,QAAQ,GAAI,MAAM,KAAKR,KAAZ,GAAqB,KAAKC,QAAzC;AAEA,aAAKlB,CAAL,IAAUyB,QAAV;;AACA,YAAG,KAAKzB,CAAL,IAAUd,MAAM,CAACS,MAApB,EAA2B;AACvB,eAAKK,CAAL,GAAS,CAAT;AACA,eAAKE,CAAL,GAASS,IAAI,CAACK,MAAL,KAAgB9B,MAAM,CAACQ,KAAhC;AACH;AACJ;;AAEDgC,MAAAA,IAAI,GAAE;AACFtC,QAAAA,GAAG,CAACuC,SAAJ;AACAvC,QAAAA,GAAG,CAACwC,SAAJ,GAAgB,OAAhB;AACAxC,QAAAA,GAAG,CAACyC,GAAJ,CAAQ,KAAK3B,CAAb,EAAgB,KAAKF,CAArB,EAAwB,KAAKmB,IAA7B,EAAmC,CAAnC,EAAsCR,IAAI,CAACmB,EAAL,GAAU,CAAhD;AACA1C,QAAAA,GAAG,CAAC2C,IAAJ;AACH;;AA7BU;;AAiCf,aAASC,IAAT,GAAe;AACX,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG1C,iBAAnB,EAAsC0C,CAAC,EAAvC,EAA0C;AACtC3C,QAAAA,cAAc,CAACoB,IAAf,CAAoB,IAAII,QAAJ,EAApB;AACH;AACJ;;AAEDkB,IAAAA,IAAI;;AACJ,aAASE,OAAT,GAAkB;AACd9C,MAAAA,GAAG,CAACK,SAAJ,CAAcX,OAAd,EAAuB,CAAvB,EAA0B,CAA1B,EAA6BI,MAAM,CAACQ,KAApC,EAA2CR,MAAM,CAACS,MAAlD;AAEAP,MAAAA,GAAG,CAAC+C,WAAJ,GAAkB,IAAlB;AACA/C,MAAAA,GAAG,CAACwC,SAAJ,GAAgB,YAAhB;AACAxC,MAAAA,GAAG,CAACgD,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBlD,MAAM,CAACQ,KAA1B,EAAiCR,MAAM,CAACS,MAAxC;;AAEA,WAAI,IAAIsC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG3C,cAAc,CAAC+C,MAAlC,EAA0CJ,CAAC,EAA3C,EAA8C;AAC1C3C,QAAAA,cAAc,CAAC2C,CAAD,CAAd,CAAkBV,MAAlB;AACAjC,QAAAA,cAAc,CAAC2C,CAAD,CAAd,CAAkBP,IAAlB;AACH;;AACDY,MAAAA,qBAAqB,CAACJ,OAAD,CAArB;AACH;;AACDA,IAAAA,OAAO,GA3FK,CA6FZ;;AAGA,WAAO,MAAM;AACXK,MAAAA,MAAM,CAACC,oBAAP,CAA4B3B,gBAA5B;AACD,KAFD;AAGD,GAnGM,EAmGJ,EAnGI,CAAT;AAsGA,sBAAO;AAAQ,IAAA,GAAG,EAAE5B,SAAb;AAAA,OAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AAEH,CA5GD;;GAAMD,M;;KAAAA,M;AA8GN,eAAeA,MAAf,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React,{ useRef, useEffect } from 'react';\nimport MyImage from './ParticleImage.js';\n\n\nconst Canvas = props => {\n    \n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n    \n        const canvas = canvasRef.current\n        const ctx = canvas.getContext('2d');\n    \n        let particlesArray = [];\n        const numberOfParticles = 12000;\n        const detail = 1;\n    \n        ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n        const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n        let grid = [];\n        for (let y = 0; y < canvas.height; y += detail){\n            let row = [];\n            for (let x = 0; x < canvas.width; x += detail){\n                const red = pixels.data[(y * 4 * pixels.width) + (x * 4)]\n                const green = pixels.data[(y * 4 * pixels.width) + (x * 4 + 1)]\n                const blue = pixels.data[(y * 4 * pixels.width) + (x * 4 + 2)]\n                const color = 'rgb(' + red +',' + green + ',' + blue + ')';\n                const brightness = calculateBrightness(red, green, blue)/100;\n    \n                row.push(brightness);\n            }  \n            grid.push(row); \n        }\n\n        function calculateBrightness(red, green, blue){\n            return Math.sqrt(\n                (red * red) * 0.299 +\n                (green * green) * 0.587 +\n                (blue * blue) * 0.114\n            )/100\n        }\n\n        let animationFrameId\n    \n        class Particle {\n            constructor(){\n                this.x = Math.random() * canvas.width;\n                this.y = 0;\n                this.speed = 0;\n                this.velocity = Math.random() * 0.5;\n                this.size = Math.random() * 1 + 1;\n                this.position1 = Math.floor(this.y);\n                this.position2 = Math.floor(this.x);\n            }\n\n            update() {\n                this.position1 = Math.floor(this.y);\n                this.position2 = Math.floor(this.x);\n                this.speed = mappedImage[this.position1][this.position2][0]\n                let movement = (2.5 - this.speed) + this.velocity;\n\n                this.y += movement;\n                if(this.y >= canvas.height){\n                    this.y = 0;\n                    this.x = Math.random() * canvas.width;\n                }\n            }\n\n            draw(){\n                ctx.beginPath();\n                ctx.fillStyle = 'white';\n                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n                ctx.fill();\n            }\n        }\n\n\n        function init(){\n            for(let i = 0; i < numberOfParticles; i++){\n                particlesArray.push(new Particle)\n            }\n        }\n\n        init();\n        function animate(){\n            ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n\n            ctx.globalAlpha = 0.05;\n            ctx.fillStyle = 'rgb(0,0,0)';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n            for(let i = 0; i < particlesArray.length; i++){\n                particlesArray[i].update();\n                particlesArray[i].draw();\n            }\n            requestAnimationFrame(animate);\n        }\n        animate()\n\n        //Our draw came here\n\n        \n        return () => {\n          window.cancelAnimationFrame(animationFrameId)\n        }\n      }, [])\n      \n\n    return <canvas ref={canvasRef} {...props} />\n\n}\n\nexport default Canvas;\n\n// myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n    \n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n\n//     class Particle {\n//         constructor(){\n//             this.x = Math.random() * canvas.width;\n//             this.y = 0;\n//             this.speed = 0;\n//             this.velocity = Math.random() * 0.5;\n//             this.size = Math.random() * 1.5 + 1;\n//         }\n\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n\n//     init();\n//     function animate(){\n//         ctx.globalAlpha = 0.05;\n//         ctx.fillStyle = 'rgb(0,0,0)';\n//         ctx.fillRect(0,0,canvas.width, canvas.height);\n\n//         for(let i = 0; i < particlesArray.length; i++){\n//             particlesArray[i].update();\n//             particlesArray[i].draw();\n//         }\n//         requestAnimationFrame(animate);\n//     }\n//     animate()\n// });\n"]},"metadata":{},"sourceType":"module"}