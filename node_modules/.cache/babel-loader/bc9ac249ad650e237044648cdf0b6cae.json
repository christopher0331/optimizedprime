{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let particlesArray = [];\n    const numberOfParticles = 5000;\n\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = 0;\n        this.speed = 0;\n        this.velocity = Math.random() * 0.5;\n        this.size = Math.random() * 1.5 + 1;\n      }\n\n      update() {\n        this.y += this.velocity;\n\n        if (this.y >= canvas.height) {\n          this.y = 0;\n          this.x = Math.random() * canvas.width;\n        }\n      }\n\n      draw() {\n        ctx.beginPath();\n        ctx.fillStyle = 'white';\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n    }\n\n    function init() {\n      for (let i = 0; i < numberOfParticles; i++) {\n        particlesArray.push(new Particle());\n      }\n    }\n\n    init();\n\n    function animate() {\n      ctx.globalAlpha = 0.05;\n      ctx.fillStyle = 'rgb(0,0,0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      for (let i = 0; i < particlesArray.length; i++) {\n        particlesArray[i].update();\n        particlesArray[i].draw();\n      }\n\n      requestAnimationFrame(animate);\n    }\n\n    animate();\n  });\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas; // myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n//     class Particle {\n//         constructor(){\n//             this.x = Math.random() * canvas.width;\n//             this.y = 0;\n//             this.speed = 0;\n//             this.velocity = Math.random() * 0.5;\n//             this.size = Math.random() * 1.5 + 1;\n//         }\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n//     init();\n//     function animate(){\n//         ctx.globalAlpha = 0.05;\n//         ctx.fillStyle = 'rgb(0,0,0)';\n//         ctx.fillRect(0,0,canvas.width, canvas.height);\n//         for(let i = 0; i < particlesArray.length; i++){\n//             particlesArray[i].update();\n//             particlesArray[i].draw();\n//         }\n//         requestAnimationFrame(animate);\n//     }\n//     animate()\n// });\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js"],"names":["React","useRef","useEffect","Canvas","props","canvasRef","canvas","current","ctx","getContext","particlesArray","numberOfParticles","Particle","constructor","x","Math","random","width","y","speed","velocity","size","update","height","draw","beginPath","fillStyle","arc","PI","fill","init","i","push","animate","globalAlpha","fillRect","length","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst Canvas = props => {\n    \n    const canvasRef = useRef(null);\n\n\n    useEffect(() => {\n    \n        const canvas = canvasRef.current\n        const ctx = canvas.getContext('2d')\n\n            let particlesArray = [];\n            const numberOfParticles = 5000;\n\n            class Particle {\n                constructor(){\n                    this.x = Math.random() * canvas.width;\n                    this.y = 0;\n                    this.speed = 0;\n                    this.velocity = Math.random() * 0.5;\n                    this.size = Math.random() * 1.5 + 1;\n                }\n\n                update() {\n                    this.y+= this.velocity;\n                    if(this.y >= canvas.height){\n                        this.y = 0;\n                        this.x = Math.random() * canvas.width;\n                    }\n                }\n\n                draw(){\n                    ctx.beginPath();\n                    ctx.fillStyle = 'white';\n                    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n                    ctx.fill();\n                }\n            }\n\n            function init(){\n                for(let i = 0; i < numberOfParticles; i++){\n                    particlesArray.push(new Particle())\n                }\n            }\n\n            init();\n            function animate(){\n                ctx.globalAlpha = 0.05;\n                ctx.fillStyle = 'rgb(0,0,0)';\n                ctx.fillRect(0,0,canvas.width, canvas.height);\n\n                for(let i = 0; i < particlesArray.length; i++){\n                    particlesArray[i].update();\n                    particlesArray[i].draw();\n                }\n                requestAnimationFrame(animate);\n            }\n            animate()\n        })\n}\n\nexport default Canvas;\n\n// myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n    \n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n\n//     class Particle {\n//         constructor(){\n//             this.x = Math.random() * canvas.width;\n//             this.y = 0;\n//             this.speed = 0;\n//             this.velocity = Math.random() * 0.5;\n//             this.size = Math.random() * 1.5 + 1;\n//         }\n\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n\n//     init();\n//     function animate(){\n//         ctx.globalAlpha = 0.05;\n//         ctx.fillStyle = 'rgb(0,0,0)';\n//         ctx.fillRect(0,0,canvas.width, canvas.height);\n\n//         for(let i = 0; i < particlesArray.length; i++){\n//             particlesArray[i].update();\n//             particlesArray[i].draw();\n//         }\n//         requestAnimationFrame(animate);\n//     }\n//     animate()\n// });\n"]},"metadata":{},"sourceType":"module"}