{"ast":null,"code":"var _jsxFileName = \"/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n\n  class Particle {\n    constructor(props) {\n      this.x = Math.random() * props.width;\n      this.y = 0;\n      this.speed = 0;\n      this.velocity = Math.random() * 0.5;\n      this.size = Math.random() * 1.5 + 1;\n    }\n\n    update() {\n      this.y += this.velocity;\n\n      if (this.y >= props.height) {\n        this.y = 0;\n        this.x = Math.random() * props.width;\n      }\n    }\n\n    draw() {\n      ctx.beginPath();\n      ctx.fillStyle = 'white';\n      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId; //Our draw came here\n\n    const render = () => {\n      frameCount++;\n      Particle.draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [Particle.draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas; // myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n// class Particle {\n//     constructor(){\n//         this.x = Math.random() * canvas.width;\n//         this.y = 0;\n//         this.speed = 0;\n//         this.velocity = Math.random() * 0.5;\n//         this.size = Math.random() * 1.5 + 1;\n//     }\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n// init();\n// function animate(){\n//     ctx.globalAlpha = 0.05;\n//     ctx.fillStyle = 'rgb(0,0,0)';\n//     ctx.fillRect(0,0,canvas.width, canvas.height);\n//     for(let i = 0; i < particlesArray.length; i++){\n//         particlesArray[i].update();\n//         particlesArray[i].draw();\n//     }\n//     requestAnimationFrame(animate);\n// }\n// animate()\n// });\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js"],"names":["React","useRef","useEffect","Canvas","props","canvasRef","Particle","constructor","x","Math","random","width","y","speed","velocity","size","update","height","draw","ctx","beginPath","fillStyle","arc","PI","fill","canvas","current","context","getContext","frameCount","animationFrameId","render","window","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAwC,OAAxC;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AAEpB,QAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAMK,QAAN,CAAe;AACXC,IAAAA,WAAW,CAACH,KAAD,EAAO;AACd,WAAKI,CAAL,GAASC,IAAI,CAACC,MAAL,KAAgBN,KAAK,CAACO,KAA/B;AACA,WAAKC,CAAL,GAAS,CAAT;AACA,WAAKC,KAAL,GAAa,CAAb;AACA,WAAKC,QAAL,GAAgBL,IAAI,CAACC,MAAL,KAAgB,GAAhC;AACA,WAAKK,IAAL,GAAYN,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB,CAAlC;AACH;;AAEDM,IAAAA,MAAM,GAAG;AACL,WAAKJ,CAAL,IAAS,KAAKE,QAAd;;AACA,UAAG,KAAKF,CAAL,IAAUR,KAAK,CAACa,MAAnB,EAA0B;AACtB,aAAKL,CAAL,GAAS,CAAT;AACA,aAAKJ,CAAL,GAASC,IAAI,CAACC,MAAL,KAAgBN,KAAK,CAACO,KAA/B;AACH;AACJ;;AAEDO,IAAAA,IAAI,GAAE;AACFC,MAAAA,GAAG,CAACC,SAAJ;AACAD,MAAAA,GAAG,CAACE,SAAJ,GAAgB,OAAhB;AACAF,MAAAA,GAAG,CAACG,GAAJ,CAAQ,KAAKd,CAAb,EAAgB,KAAKI,CAArB,EAAwB,KAAKG,IAA7B,EAAmC,CAAnC,EAAsCN,IAAI,CAACc,EAAL,GAAU,CAAhD;AACAJ,MAAAA,GAAG,CAACK,IAAJ;AACH;;AAtBU;;AAyBftB,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMuB,MAAM,GAAGpB,SAAS,CAACqB,OAAzB;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,gBAAJ,CALY,CAOZ;;AACA,UAAMC,MAAM,GAAG,MAAM;AACnBF,MAAAA,UAAU;AACVvB,MAAAA,QAAQ,CAACY,IAAT,CAAcS,OAAd,EAAuBE,UAAvB;AACAC,MAAAA,gBAAgB,GAAGE,MAAM,CAACC,qBAAP,CAA6BF,MAA7B,CAAnB;AACD,KAJD;;AAKAA,IAAAA,MAAM;AAEN,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,oBAAP,CAA4BJ,gBAA5B;AACD,KAFD;AAGD,GAlBM,EAkBJ,CAACxB,QAAQ,CAACY,IAAV,CAlBI,CAAT;AAqBA,sBAAO;AAAQ,IAAA,GAAG,EAAEb,SAAb;AAAA,OAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AAEH,CApDD;;GAAMD,M;;KAAAA,M;AAsDN,eAAeA,MAAf,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEI;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ","sourcesContent":["import React,{ useRef, useEffect } from 'react';\n\nconst Canvas = props => {\n    \n    const canvasRef = useRef(null);\n\n    class Particle {\n        constructor(props){\n            this.x = Math.random() * props.width;\n            this.y = 0;\n            this.speed = 0;\n            this.velocity = Math.random() * 0.5;\n            this.size = Math.random() * 1.5 + 1;\n        }\n\n        update() {\n            this.y+= this.velocity;\n            if(this.y >= props.height){\n                this.y = 0;\n                this.x = Math.random() * props.width;\n            }\n        }\n\n        draw(){\n            ctx.beginPath();\n            ctx.fillStyle = 'white';\n            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n            ctx.fill();\n        }\n    }\n\n    useEffect(() => {\n    \n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d')\n        let frameCount = 0\n        let animationFrameId\n        \n        //Our draw came here\n        const render = () => {\n          frameCount++\n          Particle.draw(context, frameCount)\n          animationFrameId = window.requestAnimationFrame(render)\n        }\n        render()\n        \n        return () => {\n          window.cancelAnimationFrame(animationFrameId)\n        }\n      }, [Particle.draw])\n\n\n    return <canvas ref={canvasRef} {...props} />\n\n}\n\nexport default Canvas;\n\n// myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n    \n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n\n    // class Particle {\n    //     constructor(){\n    //         this.x = Math.random() * canvas.width;\n    //         this.y = 0;\n    //         this.speed = 0;\n    //         this.velocity = Math.random() * 0.5;\n    //         this.size = Math.random() * 1.5 + 1;\n    //     }\n\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n\n    // init();\n    // function animate(){\n    //     ctx.globalAlpha = 0.05;\n    //     ctx.fillStyle = 'rgb(0,0,0)';\n    //     ctx.fillRect(0,0,canvas.width, canvas.height);\n\n    //     for(let i = 0; i < particlesArray.length; i++){\n    //         particlesArray[i].update();\n    //         particlesArray[i].draw();\n    //     }\n    //     requestAnimationFrame(animate);\n    // }\n    // animate()\n// });\n"]},"metadata":{},"sourceType":"module"}