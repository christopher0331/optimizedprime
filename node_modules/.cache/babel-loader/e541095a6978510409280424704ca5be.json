{"ast":null,"code":"var _jsxFileName = \"/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport MyImage from './ParticleImage.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = document.getElementById('canvas1');\n    const ctx = canvas.getContext('2d');\n    canvas.width = 572;\n    canvas.height = 352;\n    let particlesArray = [];\n    const numberOfParticles = 12000;\n    const detail = 1;\n    ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n    const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    let grid = [];\n\n    for (let y = 0; y < canvas.height; y += detail) {\n      let row = [];\n\n      for (let x = 0; x < canvas.width; x += detail) {\n        const red = pixels.data[y * 4 * pixels.width + x * 4];\n        const green = pixels.data[y * 4 * pixels.width + (x * 4 + 1)];\n        const blue = pixels.data[y * 4 * pixels.width + (x * 4 + 2)];\n        const color = 'rgb(' + red + ',' + green + ',' + blue + ')';\n        const brightness = calculateBrightness(red, green, blue) / 100;\n        row.push(brightness);\n      }\n\n      grid.push(row);\n    }\n\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = 0; //this.prevX = this.x;\n\n        this.speed = 0;\n        this.velocity = Math.random() * 0.7;\n        this.size = Math.random() * 2 + .1;\n      }\n\n      update() {\n        this.speed = grid[Math.floor(this.y / detail)][Math.floor(this.x / detail)];\n        let movement = 2.5 - this.speed + this.velocity;\n        this.y += movement;\n\n        if (this.y >= canvas.height) {\n          this.y = 0;\n          this.x = Math.random() * canvas.width;\n        } //console.log(this.x += movement)\n\n      }\n\n      draw() {\n        ctx.beginPath();\n        ctx.fillStyle = 'white';\n        ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n\n    }\n\n    function init() {\n      for (let i = 0; i < numberOfParticles; i++) {\n        particlesArray.push(new Particle());\n      }\n    }\n\n    init();\n\n    function animate() {\n      ctx.globalAlpha = 0.05;\n      ctx.fillStyle = 'rgb(0, 0,0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.globalAlpha = 0.2;\n\n      for (let i = 0; i < particlesArray.length; i++) {\n        particlesArray[i].update();\n        ctx.globalAlpha = particlesArray[i].speed * 0.3;\n        particlesArray[i].draw();\n      }\n\n      requestAnimationFrame(animate);\n    }\n\n    animate();\n\n    function calculateBrightness(red, green, blue) {\n      return Math.sqrt(red * red * 0.299 + green * green * 0.587 + blue * blue * 0.114);\n    }\n\n    let animationFrameId; //Our draw came here\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas; // myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n//     class Particle {\n//         constructor(){\n//             this.x = Math.random() * canvas.width;\n//             this.y = 0;\n//             this.speed = 0;\n//             this.velocity = Math.random() * 0.5;\n//             this.size = Math.random() * 1.5 + 1;\n//         }\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n//     init();\n//     function animate(){\n//         ctx.globalAlpha = 0.05;\n//         ctx.fillStyle = 'rgb(0,0,0)';\n//         ctx.fillRect(0,0,canvas.width, canvas.height);\n//         for(let i = 0; i < particlesArray.length; i++){\n//             particlesArray[i].update();\n//             particlesArray[i].draw();\n//         }\n//         requestAnimationFrame(animate);\n//     }\n//     animate()\n// });\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js"],"names":["React","useRef","useEffect","MyImage","Canvas","props","canvasRef","canvas","document","getElementById","ctx","getContext","width","height","particlesArray","numberOfParticles","detail","drawImage","pixels","getImageData","clearRect","grid","y","row","x","red","data","green","blue","color","brightness","calculateBrightness","push","Particle","constructor","Math","random","speed","velocity","size","update","floor","movement","draw","beginPath","fillStyle","arc","PI","fill","init","i","animate","globalAlpha","fillRect","length","requestAnimationFrame","sqrt","animationFrameId","window","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import React,{ useRef, useEffect } from 'react';\nimport MyImage from './ParticleImage.js';\n\n\nconst Canvas = props => {\n    \n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const canvas = document.getElementById('canvas1');\n        const ctx = canvas.getContext('2d');\n        canvas.width = 572;\n        canvas.height = 352;\n    \n        let particlesArray = [];\n        const numberOfParticles = 12000;\n        const detail = 1;\n    \n        ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n        const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n        let grid = [];\n        for (let y = 0; y < canvas.height; y += detail){\n            let row = [];\n            for (let x = 0; x < canvas.width; x += detail){\n                const red = pixels.data[(y * 4 * pixels.width) + (x * 4)]\n                const green = pixels.data[(y * 4 * pixels.width) + (x * 4 + 1)]\n                const blue = pixels.data[(y * 4 * pixels.width) + (x * 4 + 2)]\n                const color = 'rgb(' + red +',' + green + ',' + blue + ')';\n                const brightness = calculateBrightness(red, green, blue)/100;\n    \n                row.push(brightness);\n            }  \n            grid.push(row); \n        }\n    \n        class Particle {\n            constructor(){\n                this.x = Math.random() * canvas.width;\n                this.y =  0;\n                //this.prevX = this.x;\n                this.speed = 0;\n                this.velocity = Math.random() * 0.7;\n                this.size = Math.random() * 2 + .1;\n            }\n            update () {\n                this.speed = grid[Math.floor(this.y / detail)][Math.floor(this.x / detail)];\n                let movement = (2.5 - this.speed) + this.velocity;\n                this.y += movement;\n                if (this.y >= canvas.height) {\n                    this.y = 0;\n                    this.x = Math.random() * canvas.width;\n                }\n                //console.log(this.x += movement)\n            }\n            draw(){\n                ctx.beginPath();\n                ctx.fillStyle = 'white';\n                ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\n                ctx.fill();\n            }\n        }\n    \n        function init(){\n            for (let i = 0; i < numberOfParticles; i++){\n                particlesArray.push(new Particle());\n            }\n        }\n        init();\n    \n        function animate () {\n            ctx.globalAlpha = 0.05;\n            ctx.fillStyle = 'rgb(0, 0,0)';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.globalAlpha = 0.2;\n            for (let i = 0; i < particlesArray.length; i++) {\n                particlesArray[i].update();\n                ctx.globalAlpha = particlesArray[i].speed * 0.3;\n                particlesArray[i].draw();\n            }\n            requestAnimationFrame( animate );\n        }\n        animate();\n    \n        function calculateBrightness(red, green, blue){\n            return Math.sqrt(\n                (red * red) * 0.299 +\n                (green * green) * 0.587 +\n                (blue * blue) * 0.114\n            );\n        }\n        let animationFrameId;\n        //Our draw came here\n\n        \n        return () => {\n          window.cancelAnimationFrame(animationFrameId)\n        }\n      }, [])\n      \n\n    return <canvas ref={canvasRef} {...props} />\n\n}\n\nexport default Canvas;\n\n// myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n    \n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n\n//     class Particle {\n//         constructor(){\n//             this.x = Math.random() * canvas.width;\n//             this.y = 0;\n//             this.speed = 0;\n//             this.velocity = Math.random() * 0.5;\n//             this.size = Math.random() * 1.5 + 1;\n//         }\n\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n\n//     init();\n//     function animate(){\n//         ctx.globalAlpha = 0.05;\n//         ctx.fillStyle = 'rgb(0,0,0)';\n//         ctx.fillRect(0,0,canvas.width, canvas.height);\n\n//         for(let i = 0; i < particlesArray.length; i++){\n//             particlesArray[i].update();\n//             particlesArray[i].draw();\n//         }\n//         requestAnimationFrame(animate);\n//     }\n//     animate()\n// });\n"]},"metadata":{},"sourceType":"module"}