{"ast":null,"code":"var _jsxFileName = \"/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport MyImage from './ParticleImage.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n    let particlesArray = [];\n    const numberOfParticles = 5000;\n    let mappedImage = [];\n\n    for (let y = 0; y < canvas.height; y++) {\n      let row = [];\n\n      for (let x = 0; x < canvas.width; x++) {\n        const red = pixels.data[y * 4 * pixels.width + x * 4];\n        const green = pixels.data[y * 4 * pixels.width + (x * 4 + 1)];\n        const blue = pixels.data[y * 4 * pixels.width + (x * 4 + 2)];\n      }\n    }\n\n    let animationFrameId;\n\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = 0;\n        this.speed = 0;\n        this.velocity = Math.random() * 0.5;\n        this.size = Math.random() * 1 + 1;\n      }\n\n      update() {\n        this.y += this.velocity;\n\n        if (this.y >= canvas.height) {\n          this.y = 0;\n          this.x = Math.random() * canvas.width;\n        }\n      }\n\n      draw() {\n        ctx.beginPath();\n        ctx.fillStyle = 'white';\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n    }\n\n    function init() {\n      for (let i = 0; i < numberOfParticles; i++) {\n        particlesArray.push(new Particle());\n      }\n    }\n\n    init();\n\n    function animate() {\n      ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n      ctx.globalAlpha = 0.05;\n      ctx.fillStyle = 'rgb(0,0,0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      for (let i = 0; i < particlesArray.length; i++) {\n        particlesArray[i].update();\n        particlesArray[i].draw();\n      }\n\n      requestAnimationFrame(animate);\n    }\n\n    animate(); //Our draw came here\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas; // myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n//     class Particle {\n//         constructor(){\n//             this.x = Math.random() * canvas.width;\n//             this.y = 0;\n//             this.speed = 0;\n//             this.velocity = Math.random() * 0.5;\n//             this.size = Math.random() * 1.5 + 1;\n//         }\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n//     init();\n//     function animate(){\n//         ctx.globalAlpha = 0.05;\n//         ctx.fillStyle = 'rgb(0,0,0)';\n//         ctx.fillRect(0,0,canvas.width, canvas.height);\n//         for(let i = 0; i < particlesArray.length; i++){\n//             particlesArray[i].update();\n//             particlesArray[i].draw();\n//         }\n//         requestAnimationFrame(animate);\n//     }\n//     animate()\n// });\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js"],"names":["React","useRef","useEffect","MyImage","Canvas","props","canvasRef","canvas","current","ctx","getContext","pixels","getImageData","width","height","drawImage","particlesArray","numberOfParticles","mappedImage","y","row","x","red","data","green","blue","animationFrameId","Particle","constructor","Math","random","speed","velocity","size","update","draw","beginPath","fillStyle","arc","PI","fill","init","i","push","animate","globalAlpha","fillRect","length","requestAnimationFrame","window","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import React,{ useRef, useEffect } from 'react';\nimport MyImage from './ParticleImage.js';\n\n\nconst Canvas = props => {\n    \n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n    \n        const canvas = canvasRef.current\n        const ctx = canvas.getContext('2d')\n        const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n        ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n        let particlesArray = [];\n        const numberOfParticles = 5000;\n\n        let mappedImage = [];\n\n        for(let y = 0; y < canvas.height; y++){\n            let row = [];\n            for(let x = 0; x < canvas.width; x++){\n                const red = pixels.data[(y * 4 * pixels.width) + (x * 4)]\n                const green = pixels.data[(y * 4 * pixels.width) + (x * 4 + 1)]\n                const blue = pixels.data[(y * 4 * pixels.width) + (x * 4 + 2)]\n\n            }\n        }\n\n        let animationFrameId\n    \n        class Particle {\n            constructor(){\n                this.x = Math.random() * canvas.width;\n                this.y = 0;\n                this.speed = 0;\n                this.velocity = Math.random() * 0.5;\n                this.size = Math.random() * 1 + 1;\n            }\n\n            update() {\n                this.y += this.velocity;\n                if(this.y >= canvas.height){\n                    this.y = 0;\n                    this.x = Math.random() * canvas.width;\n                }\n            }\n\n            draw(){\n                ctx.beginPath();\n                ctx.fillStyle = 'white';\n                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n                ctx.fill();\n            }\n        }\n\n\n        function init(){\n            for(let i = 0; i < numberOfParticles; i++){\n                particlesArray.push(new Particle)\n            }\n        }\n\n        init();\n        function animate(){\n            ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n\n            ctx.globalAlpha = 0.05;\n            ctx.fillStyle = 'rgb(0,0,0)';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n            for(let i = 0; i < particlesArray.length; i++){\n                particlesArray[i].update();\n                particlesArray[i].draw();\n            }\n            requestAnimationFrame(animate);\n        }\n        animate()\n\n        //Our draw came here\n\n        \n        return () => {\n          window.cancelAnimationFrame(animationFrameId)\n        }\n      }, [])\n      \n\n    return <canvas ref={canvasRef} {...props} />\n\n}\n\nexport default Canvas;\n\n// myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n    \n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n\n//     class Particle {\n//         constructor(){\n//             this.x = Math.random() * canvas.width;\n//             this.y = 0;\n//             this.speed = 0;\n//             this.velocity = Math.random() * 0.5;\n//             this.size = Math.random() * 1.5 + 1;\n//         }\n\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n\n//     init();\n//     function animate(){\n//         ctx.globalAlpha = 0.05;\n//         ctx.fillStyle = 'rgb(0,0,0)';\n//         ctx.fillRect(0,0,canvas.width, canvas.height);\n\n//         for(let i = 0; i < particlesArray.length; i++){\n//             particlesArray[i].update();\n//             particlesArray[i].draw();\n//         }\n//         requestAnimationFrame(animate);\n//     }\n//     animate()\n// });\n"]},"metadata":{},"sourceType":"module"}