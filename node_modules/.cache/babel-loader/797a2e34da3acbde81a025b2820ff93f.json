{"ast":null,"code":"var _jsxFileName = \"/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport MyImage from './ParticleImage.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(MyImage, 0, 0, 300, 600);\n    let particlesArray = [];\n    const numberOfParticles = 5000;\n    let animationFrameId;\n\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = 0;\n        this.speed = 0;\n        this.velocity = Math.random() * 0.5;\n        this.size = Math.random() * 1 + 1;\n      }\n\n      update() {\n        this.y += this.velocity;\n\n        if (this.y >= canvas.height) {\n          this.y = 0;\n          this.x = Math.random() * canvas.width;\n        }\n      }\n\n      draw() {\n        ctx.beginPath();\n        ctx.fillStyle = 'white';\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n    }\n\n    function init() {\n      for (let i = 0; i < numberOfParticles; i++) {\n        particlesArray.push(new Particle());\n      }\n    }\n\n    init();\n\n    function animate() {\n      ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n      ctx.globalAlpha = 0.05;\n      ctx.fillStyle = 'rgb(0,0,0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      for (let i = 0; i < particlesArray.length; i++) {\n        particlesArray[i].update();\n        particlesArray[i].draw();\n      }\n\n      requestAnimationFrame(animate);\n    }\n\n    animate(); //Our draw came here\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas; // myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n//     class Particle {\n//         constructor(){\n//             this.x = Math.random() * canvas.width;\n//             this.y = 0;\n//             this.speed = 0;\n//             this.velocity = Math.random() * 0.5;\n//             this.size = Math.random() * 1.5 + 1;\n//         }\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n//     init();\n//     function animate(){\n//         ctx.globalAlpha = 0.05;\n//         ctx.fillStyle = 'rgb(0,0,0)';\n//         ctx.fillRect(0,0,canvas.width, canvas.height);\n//         for(let i = 0; i < particlesArray.length; i++){\n//             particlesArray[i].update();\n//             particlesArray[i].draw();\n//         }\n//         requestAnimationFrame(animate);\n//     }\n//     animate()\n// });\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/christopherhancock/Desktop/OptimizedPrime/optimizedprime/src/components/Canvas.js"],"names":["React","useRef","useEffect","MyImage","Canvas","props","canvasRef","canvas","current","ctx","getContext","drawImage","particlesArray","numberOfParticles","animationFrameId","Particle","constructor","x","Math","random","width","y","speed","velocity","size","update","height","draw","beginPath","fillStyle","arc","PI","fill","init","i","push","animate","globalAlpha","fillRect","length","requestAnimationFrame","window","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import React,{ useRef, useEffect } from 'react';\nimport MyImage from './ParticleImage.js';\n\n\nconst Canvas = props => {\n    \n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n    \n        const canvas = canvasRef.current\n        const ctx = canvas.getContext('2d')\n    \n        ctx.drawImage(MyImage, 0, 0, 300, 600);\n        let particlesArray = [];\n        const numberOfParticles = 5000;\n\n        let animationFrameId\n    \n        class Particle {\n            constructor(){\n                this.x = Math.random() * canvas.width;\n                this.y = 0;\n                this.speed = 0;\n                this.velocity = Math.random() * 0.5;\n                this.size = Math.random() * 1 + 1;\n            }\n\n            update() {\n                this.y += this.velocity;\n                if(this.y >= canvas.height){\n                    this.y = 0;\n                    this.x = Math.random() * canvas.width;\n                }\n            }\n\n            draw(){\n                ctx.beginPath();\n                ctx.fillStyle = 'white';\n                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n                ctx.fill();\n            }\n        }\n\n\n        function init(){\n            for(let i = 0; i < numberOfParticles; i++){\n                particlesArray.push(new Particle)\n            }\n        }\n\n        init();\n        function animate(){\n            ctx.drawImage(MyImage, 0, 0, canvas.width, canvas.height);\n\n            ctx.globalAlpha = 0.05;\n            ctx.fillStyle = 'rgb(0,0,0)';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n            for(let i = 0; i < particlesArray.length; i++){\n                particlesArray[i].update();\n                particlesArray[i].draw();\n            }\n            requestAnimationFrame(animate);\n        }\n        animate()\n\n        //Our draw came here\n\n        \n        return () => {\n          window.cancelAnimationFrame(animationFrameId)\n        }\n      }, [])\n      \n\n    return <canvas ref={canvasRef} {...props} />\n\n}\n\nexport default Canvas;\n\n// myImage.addEventListener('load', function(){\n//     const canvas = document.getElementsByClassName('canvas1')\n\n//     const ctx = canvas.getContext('2d');\n//     canvas.width = 500;\n//     canvas.height = 706;\n    \n//     ctx.drawImage(myImage, 0, 0, canvas.width, canvas.height);\n\n//     let particlesArray = [];\n//     const numberOfParticles = 5000;\n\n//     class Particle {\n//         constructor(){\n//             this.x = Math.random() * canvas.width;\n//             this.y = 0;\n//             this.speed = 0;\n//             this.velocity = Math.random() * 0.5;\n//             this.size = Math.random() * 1.5 + 1;\n//         }\n\n//         update() {\n//             this.y+= this.velocity;\n//             if(this.y >= canvas.height){\n//                 this.y = 0;\n//                 this.x = Math.random() * canvas.width;\n//             }\n//         }\n\n//         draw(){\n//             ctx.beginPath();\n//             ctx.fillStyle = 'white';\n//             ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//             ctx.fill();\n//         }\n//     }\n\n//     function init(){\n//         for(let i = 0; i < numberOfParticles; i++){\n//             particlesArray.push(new Particle())\n//         }\n//     }\n\n//     init();\n//     function animate(){\n//         ctx.globalAlpha = 0.05;\n//         ctx.fillStyle = 'rgb(0,0,0)';\n//         ctx.fillRect(0,0,canvas.width, canvas.height);\n\n//         for(let i = 0; i < particlesArray.length; i++){\n//             particlesArray[i].update();\n//             particlesArray[i].draw();\n//         }\n//         requestAnimationFrame(animate);\n//     }\n//     animate()\n// });\n"]},"metadata":{},"sourceType":"module"}